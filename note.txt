IAC :
Managing infrastructure (servers , networks , contaniers)using code instead of manual clicks

Terraform :
A popular IAC tool because its cloud - agnostic 

Workflow :
init - plan - apply - destroy

Understand the Structure :
Almost every Terraform script follows this pattern:

provider "xyz" {
  # provider settings
}

resource "type" "name" {
  # resource settings
}

fill in the blanks for any provider (AWS, Docker, Local, etc.).
----------------------------------------------------------------------------------------

Think of **Terraform** like a **robot assistant** who follows your instructions to build things (resources).

---

### 1. **Provider**

* Provider = which world your robot is working in.
* Example:

  * AWS → build in Amazon cloud
  * Azure → build in Microsoft cloud
  * Local → build on your computer
  * Random → just generate random names (like "correct-elephant")

👉 In your example, provider is **random**, so Terraform is just generating a funny name for you.

---

### 2. **Resource**

* Resource = *what you want to create*.
* Example:

  * If provider = AWS → resource could be an **EC2 instance** (a server)
  * If provider = Local → resource could be a **file** in your laptop
  * If provider = Random → resource is a **random name**

👉 In your example, resource = `random_pet` → it created a random pet name (`correct-elephant`).

---

### 3. **Source**

* Source = *where Terraform should download the provider from*.
* Most of the time it comes from **Terraform Registry** (like an app store for Terraform providers).
* Example:

  * `"hashicorp/random"` means → provider is built by HashiCorp, download from registry.

---

### Example (Real Life Analogy 🚗)

Imagine you say:

* Provider: "Amazon cloud" (like choosing a shopping mall 🏬)
* Resource: "1 EC2 instance" (like buying a laptop 💻)
* Source: "Amazon shop inside the mall"

Terraform robot goes there, buys the laptop, and gives it to you.

---

👉 In your case:

* Provider = `random` (funny name shop)
* Resource = `random_pet` (a pet name generator)
* Result = You got `"correct-elephant"`

That’s it 😃
